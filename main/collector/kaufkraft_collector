# -*- coding: utf-8 -*-
import datetime
import logging
from config import constants
from main.collector.collector import Collector
import pandas as pd
import numpy as np
import PyPDF2
from main.database.db_helper import DatastoreHelper
from main.helper.result import Result
from main.helper.util import parse

logger = logging.getLogger(__name__)


class KaufkraftCollector(Collector):

    pdf_path = None
    entity_name = None
    entity_id = None

    def __init__(self, entity_id, entity_name):
        self.pdf_path = constants.PDF_PATH_KAUFKRAFT
        self.entity_name = entity_name
        self.entity_id = entity_id

    def _save(self, data):
        success = False
        db = DatastoreHelper()
        attributes = {'updatedAt': datetime.datetime.now(), 'content': data, 'transported': False}
        key = db.create_or_update(self.entity_name, self.entity_id, attributes)
        if key:
            success = True
        return success

    def collect(self):
        result = Result()
        pdf_file_obj = open(self.pdf_path, "rb")
        pdfReader = PyPDF2.PdfFileReader(pdf_file_obj)
        text = ""
        numPages = pdfReader.getNumPages()
        for x in range(numPages):
            text += pdfReader.getPage(x).extractText()
        last = "© Michael Bauer Research GmbH, Nürnberg \nTelefon: 0911 / 28 707 020\nE-Mail: info@mb-research.de\n"
        text = text.replace(last, "")
        text = text[:-1]  # delete last \n
        split = text.split("Euro pro Kopf\n")
        replace = "\nJahresdurchschnitt\nbezogen auf\nBevölkerung\nKaufkraft 2017\nWachstumsrate in %\nPrognose 2017\n2016 bis 2017"
        string = split[1].replace(replace, "")

        # split hole String on "/n" and put it into an array
        ar = np.array(string.split("\n"))

        # number of rows are 12
        # transform the array "ar" into a row with 12 columns
        n_rows = 12
        df = pd.DataFrame(np.reshape(ar, (-1, n_rows)))

        df_1 = df[0].str.split(", ", expand=True).rename(columns={0: "city", 1: "city_type"})
        df_2 = df.iloc[:, 1:].applymap(parse).rename(columns={1: "pop_2016",
                                                              2: "buyingpower_2016_buyingpowerindex",
                                                              3: "pop_forecast_2017",
                                                              4: "pop_forecast_2017_permille",
                                                              5: "households_forecast_2017",
                                                              6: "buyingpower_2017_euro",
                                                              7: "buyingpower_2017_permille",
                                                              8: "buyingpower_2017_euro_a_head",
                                                              9: "buyingpower_2017_buyingpowerindex",
                                                              10: "growthrate_2016_2017_percentage_mio_euro ",
                                                              11: "growthrate_2016_2017_percentage_euro_a_head"})

        df_result = pd.concat([df_1, df_2], axis=1)
        result_json = pd.DataFrame(df_result).to_json(df_result)
        success = self._save(result_json)
        result.set_success(success)
        return  result



